import AbstractResolver from "./AbstractResolver";
import { ClassOf, DependencyResolver, IDIContainer, MethodArgs, WrapWithResolver } from "../types";
/**
 * ObjectDefinition creates objects from the provided class.
 *
 */
export default class ObjectResolver<T extends ClassOf<any>> extends AbstractResolver<InstanceType<T>> implements DependencyResolver<InstanceType<T>> {
    private readonly constructorFunction;
    private deps;
    private methods;
    constructor(constructorFunction: T);
    /**
     * Defines constructor parameters for a given class.
     * @param deps
     */
    construct(...deps: T extends {
        new (...args: infer P): any;
    } ? WrapWithResolver<P> : never[]): ObjectResolver<T>;
    /**
     * After DIContainer constructs object of a given class, DIContainer calls additional
     * `method`-s of a given class.
     *
     * @param methodName - string, name of a given class
     * @param args - match method signature of a given class method
     */
    method<MethodName extends keyof InstanceType<T>>(methodName: MethodName, ...args: MethodArgs<T, MethodName>): ObjectResolver<T>;
    resolve: (diContainer: IDIContainer, parentDeps?: string[]) => InstanceType<T>;
}
