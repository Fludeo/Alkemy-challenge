"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractResolver_1 = __importDefault(require("./AbstractResolver"));
var errors_1 = require("../errors");
var DIContainer_1 = require("../DIContainer");
/**
 * FunctionResolver - allows to use custom function with specified parameters, where parameters are references to
 * existing dependencies
 */
var FunctionResolver = /** @class */ (function (_super) {
    __extends(FunctionResolver, _super);
    function FunctionResolver(func) {
        var parameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            parameters[_i - 1] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this.func = func;
        _this.resolve = function (container, parentDeps) {
            var parameters = (0, DIContainer_1.resolveFunctionParameters)(container, _this.parameters, parentDeps);
            return _this.func.apply(_this, parameters);
        };
        if (typeof func !== "function") {
            throw new errors_1.FactoryDefinitionError();
        }
        _this.func = func;
        _this.parameters = parameters;
        return _this;
    }
    return FunctionResolver;
}(AbstractResolver_1.default));
exports.default = FunctionResolver;
//# sourceMappingURL=FunctionResolver.js.map