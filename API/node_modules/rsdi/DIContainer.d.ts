import { DependencyResolver, IDIContainer, ResolvedType, ResolverName } from "./types";
interface INamedResolvers {
    [k: string]: DependencyResolver | any;
}
/**
 * Dependency injection container
 */
export default class DIContainer implements IDIContainer {
    private resolvers;
    private resolved;
    /**
     * Resolves dependency by name
     * @param dependencyName - DefinitionName name of the dependency. String or class name.
     * @param parentDeps - array of parent dependencies (used to detect circular dependencies)
     */
    get<Custom = void, Name extends ResolverName = string>(dependencyName: Name, parentDeps?: string[]): ResolvedType<Custom, Name>;
    /**
     * Adds multiple dependency resolvers to the container
     * @param resolvers - named dependency object
     */
    add(resolvers: INamedResolvers): void;
    /**
     * Adds single dependency definition to the container
     * @param name - string name for the dependency
     * @param resolver - raw value or instance of IDefinition
     */
    private addResolver;
}
/**
 * Resolves given function parameters
 */
export declare function resolveFunctionParameters(diContainer: IDIContainer, parameters?: Array<DependencyResolver<any> | any>, parentDeps?: string[]): any[];
export {};
