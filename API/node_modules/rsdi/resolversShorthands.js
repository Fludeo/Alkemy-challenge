"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.diFunc = exports.diFactory = exports.diUse = exports.diValue = exports.diObject = void 0;
var ObjectResolver_1 = __importDefault(require("./resolvers/ObjectResolver"));
var RawValueResolver_1 = __importDefault(require("./resolvers/RawValueResolver"));
var ReferenceResolver_1 = __importDefault(require("./resolvers/ReferenceResolver"));
var FactoryResolver_1 = __importDefault(require("./resolvers/FactoryResolver"));
var DefinitionName_1 = require("./DefinitionName");
var FunctionResolver_1 = __importDefault(require("./resolvers/FunctionResolver"));
// shorthands for Definition classes
/**
 * ObjectDefinition creates objects from the provided class.
 * @param classConstructor
 */
function diObject(classConstructor) {
    return new ObjectResolver_1.default(classConstructor);
}
exports.diObject = diObject;
/**
 * ValueDefinition keeps raw value of any type.
 * @param value
 */
function diValue(value) {
    return new RawValueResolver_1.default(value);
}
exports.diValue = diValue;
/**
 * Refers to existing definition. i.e. definition with provided name must exists in DIContainer
 * @param definitionName
 */
function diUse(definitionName) {
    return new ReferenceResolver_1.default((0, DefinitionName_1.definitionNameToString)(definitionName));
}
exports.diUse = diUse;
/**
 * FactoryResolver - allows to use custom function to build dependency
 * @param factory
 */
function diFactory(factory) {
    return new FactoryResolver_1.default(factory);
}
exports.diFactory = diFactory;
/**
 * FunctionResolver - allows to use custom function with specified parameters, where parameters are references to
 * existing dependencies
 * @param func
 * @param parameters
 */
function diFunc(func) {
    var parameters = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        parameters[_i - 1] = arguments[_i];
    }
    return new (FunctionResolver_1.default.bind.apply(FunctionResolver_1.default, __spreadArray([void 0, func], parameters, false)))();
}
exports.diFunc = diFunc;
//# sourceMappingURL=resolversShorthands.js.map